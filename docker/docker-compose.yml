# Docker Compose file
# This compose file will bring up the all the services need to run the Writer Onboarding
# Tracking in a development environment.

# Docker Compose file format version
version: '2'

services:
    # This is the container configuration for the Apache/PHP container.
    # Apache logs will be available at the repo logs directory.
    woofup-api:
        # Build the container using the Dockerfile located in this directory
        build:
            context: .
            dockerfile: Dockerfile

        # Make sure that MySQL is built first
        depends_on:
            - mysql-woofup

        # Name assigned to the container
        container_name: woofup-api

        environment:
            # Set the timezone on the container
            - TZ=America/New_York

        volumes:
            # This will make the container use the local source code on Apache, which will
            # allow you to make changes to the code and see it on the fly.
            - ../:/app/woofup:Z

        # Make the MySQL container defined below reachable by hostname rather than IP
        links:
            - mysql-woofup

        # Map a port in the container to the host.
        # Format: HOST:CONTAINER
        # E.g.: 8080:80 will map port 8080 in the host to port 80 in the container
        # Mapping the port will allow us to access the server using localhost as host name
        ports:
            - '80:80'
            - '443:443'

    mysql-woofup:
        image: mysql:5.7

        # Name assigned to the container
        container_name: mysql-woofup

        # See the official image page for the available environment variables.
        # https://hub.docker.com/_/mysql/
        environment:
            # Set the timezone on the container
            - TZ=America/New_YorK

            # Define database details
            - MYSQL_ROOT_PASSWORD=password
            - MYSQL_DATABASE=dev-db
            - MYSQL_USER=admin
            - MYSQL_PASSWORD=password
        volumes:
            # This will map an existing MySQL data directory to this container. By doing
            # so you are able to keep data even if you remove the container.
            # Remember that just stoping a container will not destroy the data inside it
            # (data will be destroyed if you remove the container using the `docker rm` command).
            #
            # The mapping should follow this format:
            # <path on host>:<path on server>
            #
            # If you want to use an existing data directory, just uncomment the following line.
            # (and remember to change the path on host to a valid path)
            - ../.data/:/var/lib/mysql:Z
        ports:
            - 3306:3306
